#!/usr/bin/env php
<?php

declare(strict_types=1);

use DouglasGreen\PhpLinter\CacheManager;
use DouglasGreen\PhpLinter\IgnoreList;
use DouglasGreen\PhpLinter\Pdepend\MetricChecker;
use DouglasGreen\PhpLinter\Pdepend\XmlParser;
use DouglasGreen\PhpLinter\Repository;
use DouglasGreen\Utility\FileSystem\Path;
use DouglasGreen\Utility\FileSystem\PathUtil;

// Must be run in repository root directory.
$currentDir = getcwd();
if ($currentDir === false) {
    throw new Exception('Unable to get working dir');
}

require_once $currentDir . '/vendor/autoload.php';

$cache = new CacheManager($currentDir);

$ignoreList = new IgnoreList($currentDir);

$currentPath = new Path($currentDir);

$filesChecked = [];

$repository = new Repository();
$phpFiles = $repository->getPhpFiles();

$summaryFile = $cache->getSummaryFile();
$xmlPath = new Path($summaryFile);
if (! $xmlPath->exists()) {
    die('=> Skipping metrics checks (PDepend summary XML file not found)' . PHP_EOL);
}

$summaryTimestamp = PathUtil::getWriteTime($summaryFile);

foreach ($phpFiles as $phpFile) {
    if (PathUtil::getWriteTime($phpFile) > $summaryTimestamp) {
        echo '=> You need to run generate-metrics to update the PDepend metrics with your recent code changes.' .
            PHP_EOL;
        break;
    }
}

try {
    $parser = new XmlParser((string) $xmlPath);
    $packages = $parser->getPackages();
    if ($packages === null) {
        die('No packages found.' . PHP_EOL);
    }

    foreach ($packages as $package) {
        $classes = $package['classes'];
        foreach ($classes as $class) {
            $filename = CacheManager::getOriginalFile($currentPath->removeBase($class['filename']));
            if ($ignoreList->shouldIgnore($filename)) {
                continue;
            }

            // Warnings exceed 95% of similar code, errors exceed 99%.
            $classChecker = new MetricChecker($class, $class['name']);

            $classChecker->checkMaxClassSize(25, 60);

            // Has no error level.
            $classChecker->checkMaxCodeRank(0.5, 2.0);

            $classChecker->checkMaxLinesOfCode(400, 1100);

            $classChecker->checkMaxNonPrivateProperties(10, 30);
            $classChecker->checkMaxProperties(10, 25);
            $classChecker->checkMaxPublicMethods(15, 40);

            $classChecker->checkMaxAfferentCoupling(15, 45);
            $classChecker->checkMaxEfferentCoupling(12, 24);

            $classChecker->checkMaxInheritanceDepth(4, 5);
            $classChecker->checkMaxNumberOfChildClasses(15, 35);
            $classChecker->checkMaxObjectCoupling(12, 24);

            // @see https://everything2.com/title/comment-to-code+ratio
            $classChecker->checkMinCommentRatio(0.1, 0.05);

            $loc = $class['loc'] ?? 0;
            $filesChecked[$filename] = isset($filesChecked[$filename])
                ? $filesChecked[$filename] + $loc
                : $loc;
            $classChecker->printIssues($filename);

            foreach ($class['methods'] as $method) {
                $methodChecker = new MetricChecker($method, $class['name'], $method['name']);
                $methodChecker->checkMaxCyclomaticComplexity(10, 25);
                $methodChecker->checkMaxLinesOfCode(50, 130);
                $methodChecker->checkMaxNpathComplexity(50, 10000);
                $methodChecker->checkMaxHalsteadEffort(25000, 135000);
                $methodChecker->checkMinMaintainabilityIndex(40, 25);

                $methodChecker->printIssues($filename);
            }
        }

        foreach ($package['functions'] as $function) {
            $filename = CacheManager::getOriginalFile(
                $currentPath->removeBase($function['filename'])
            );
            if ($ignoreList->shouldIgnore($filename)) {
                continue;
            }
            $functionChecker = new MetricChecker($function, null, $function['name']);
            $functionChecker->checkMaxCyclomaticComplexity(9, 25);
            $functionChecker->checkMaxLinesOfCode(50, 130);
            $functionChecker->checkMaxNpathComplexity(50, 10000);
            $functionChecker->checkMaxHalsteadEffort(25000, 135000);
            $functionChecker->checkMinMaintainabilityIndex(40, 25);

            $loc = $function['loc'] ?? 0;
            $filesChecked[$filename] = isset($filesChecked[$filename])
                ? $filesChecked[$filename] + $loc
                : $loc;
            $functionChecker->printIssues($filename);
        }
    }

    // Check other files that don't contain classes or functions.
    foreach ($phpFiles as $phpFile) {
        $filename = $currentPath->removeBase($phpFile);
        if ($ignoreList->shouldIgnore($filename)) {
            continue;
        }

        if (isset($filesChecked[$filename])) {
            $locChecked = $filesChecked[$filename];
        } else {
            $locChecked = 0;
            $filesChecked[$filename] = 0;
        }

        if (! file_exists($filename)) {
            continue;
        }

        $totalLoc = count(PathUtil::loadLines($phpFile));

        // Other LOC is outside classes and functions
        $otherLoc = $totalLoc - $locChecked;
        $fileChecker = new MetricChecker([
            'loc' => $otherLoc,
        ]);

        $fileChecker->checkMaxLinesOfCode(100, 200);
        $filesChecked[$filename] += $otherLoc;
        $fileChecker->printIssues($filename);
    }
} catch (Exception $exception) {
    echo 'PDepend error: ' . $exception->getMessage() . PHP_EOL;
}
